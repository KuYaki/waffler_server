// Code generated by mockery v2.36.0. DO NOT EDIT.

package telegram

import (
	tg "github.com/gotd/td/tg"
	mock "github.com/stretchr/testify/mock"
)

// ClientSource is an autogenerated mock type for the ClientSource type
type ClientSource struct {
	mock.Mock
}

type ClientSource_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientSource) EXPECT() *ClientSource_Expecter {
	return &ClientSource_Expecter{mock: &_m.Mock}
}

// ContactSearch provides a mock function with given fields: query
func (_m *ClientSource) ContactSearch(query string) (*tg.ContactsFound, error) {
	ret := _m.Called(query)

	var r0 *tg.ContactsFound
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*tg.ContactsFound, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *tg.ContactsFound); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tg.ContactsFound)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSource_ContactSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContactSearch'
type ClientSource_ContactSearch_Call struct {
	*mock.Call
}

// ContactSearch is a helper method to define mock.On call
//   - query string
func (_e *ClientSource_Expecter) ContactSearch(query interface{}) *ClientSource_ContactSearch_Call {
	return &ClientSource_ContactSearch_Call{Call: _e.mock.On("ContactSearch", query)}
}

func (_c *ClientSource_ContactSearch_Call) Run(run func(query string)) *ClientSource_ContactSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientSource_ContactSearch_Call) Return(_a0 *tg.ContactsFound, _a1 error) *ClientSource_ContactSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSource_ContactSearch_Call) RunAndReturn(run func(string) (*tg.ContactsFound, error)) *ClientSource_ContactSearch_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessagesForID provides a mock function with given fields: channel, iDs
func (_m *ClientSource) GetMessagesForID(channel *tg.Channel, iDs []int) (tg.MessagesMessagesClass, error) {
	ret := _m.Called(channel, iDs)

	var r0 tg.MessagesMessagesClass
	var r1 error
	if rf, ok := ret.Get(0).(func(*tg.Channel, []int) (tg.MessagesMessagesClass, error)); ok {
		return rf(channel, iDs)
	}
	if rf, ok := ret.Get(0).(func(*tg.Channel, []int) tg.MessagesMessagesClass); ok {
		r0 = rf(channel, iDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.MessagesMessagesClass)
		}
	}

	if rf, ok := ret.Get(1).(func(*tg.Channel, []int) error); ok {
		r1 = rf(channel, iDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSource_GetMessagesForID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessagesForID'
type ClientSource_GetMessagesForID_Call struct {
	*mock.Call
}

// GetMessagesForID is a helper method to define mock.On call
//   - channel *tg.Channel
//   - iDs []int
func (_e *ClientSource_Expecter) GetMessagesForID(channel interface{}, iDs interface{}) *ClientSource_GetMessagesForID_Call {
	return &ClientSource_GetMessagesForID_Call{Call: _e.mock.On("GetMessagesForID", channel, iDs)}
}

func (_c *ClientSource_GetMessagesForID_Call) Run(run func(channel *tg.Channel, iDs []int)) *ClientSource_GetMessagesForID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tg.Channel), args[1].([]int))
	})
	return _c
}

func (_c *ClientSource_GetMessagesForID_Call) Return(_a0 tg.MessagesMessagesClass, _a1 error) *ClientSource_GetMessagesForID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSource_GetMessagesForID_Call) RunAndReturn(run func(*tg.Channel, []int) (tg.MessagesMessagesClass, error)) *ClientSource_GetMessagesForID_Call {
	_c.Call.Return(run)
	return _c
}

// MessagesGetHistory provides a mock function with given fields: channel, limit, AddOffset
func (_m *ClientSource) MessagesGetHistory(channel *tg.Channel, limit int, AddOffset int) (tg.MessagesMessagesClass, error) {
	ret := _m.Called(channel, limit, AddOffset)

	var r0 tg.MessagesMessagesClass
	var r1 error
	if rf, ok := ret.Get(0).(func(*tg.Channel, int, int) (tg.MessagesMessagesClass, error)); ok {
		return rf(channel, limit, AddOffset)
	}
	if rf, ok := ret.Get(0).(func(*tg.Channel, int, int) tg.MessagesMessagesClass); ok {
		r0 = rf(channel, limit, AddOffset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.MessagesMessagesClass)
		}
	}

	if rf, ok := ret.Get(1).(func(*tg.Channel, int, int) error); ok {
		r1 = rf(channel, limit, AddOffset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSource_MessagesGetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessagesGetHistory'
type ClientSource_MessagesGetHistory_Call struct {
	*mock.Call
}

// MessagesGetHistory is a helper method to define mock.On call
//   - channel *tg.Channel
//   - limit int
//   - AddOffset int
func (_e *ClientSource_Expecter) MessagesGetHistory(channel interface{}, limit interface{}, AddOffset interface{}) *ClientSource_MessagesGetHistory_Call {
	return &ClientSource_MessagesGetHistory_Call{Call: _e.mock.On("MessagesGetHistory", channel, limit, AddOffset)}
}

func (_c *ClientSource_MessagesGetHistory_Call) Run(run func(channel *tg.Channel, limit int, AddOffset int)) *ClientSource_MessagesGetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tg.Channel), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *ClientSource_MessagesGetHistory_Call) Return(_a0 tg.MessagesMessagesClass, _a1 error) *ClientSource_MessagesGetHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSource_MessagesGetHistory_Call) RunAndReturn(run func(*tg.Channel, int, int) (tg.MessagesMessagesClass, error)) *ClientSource_MessagesGetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// MessagesGetHistoryTime provides a mock function with given fields: channel, limit, AddOffset, time
func (_m *ClientSource) MessagesGetHistoryTime(channel *tg.Channel, limit int, AddOffset int, time int) (tg.MessagesMessagesClass, error) {
	ret := _m.Called(channel, limit, AddOffset, time)

	var r0 tg.MessagesMessagesClass
	var r1 error
	if rf, ok := ret.Get(0).(func(*tg.Channel, int, int, int) (tg.MessagesMessagesClass, error)); ok {
		return rf(channel, limit, AddOffset, time)
	}
	if rf, ok := ret.Get(0).(func(*tg.Channel, int, int, int) tg.MessagesMessagesClass); ok {
		r0 = rf(channel, limit, AddOffset, time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.MessagesMessagesClass)
		}
	}

	if rf, ok := ret.Get(1).(func(*tg.Channel, int, int, int) error); ok {
		r1 = rf(channel, limit, AddOffset, time)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSource_MessagesGetHistoryTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessagesGetHistoryTime'
type ClientSource_MessagesGetHistoryTime_Call struct {
	*mock.Call
}

// MessagesGetHistoryTime is a helper method to define mock.On call
//   - channel *tg.Channel
//   - limit int
//   - AddOffset int
//   - time int
func (_e *ClientSource_Expecter) MessagesGetHistoryTime(channel interface{}, limit interface{}, AddOffset interface{}, time interface{}) *ClientSource_MessagesGetHistoryTime_Call {
	return &ClientSource_MessagesGetHistoryTime_Call{Call: _e.mock.On("MessagesGetHistoryTime", channel, limit, AddOffset, time)}
}

func (_c *ClientSource_MessagesGetHistoryTime_Call) Run(run func(channel *tg.Channel, limit int, AddOffset int, time int)) *ClientSource_MessagesGetHistoryTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tg.Channel), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ClientSource_MessagesGetHistoryTime_Call) Return(_a0 tg.MessagesMessagesClass, _a1 error) *ClientSource_MessagesGetHistoryTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSource_MessagesGetHistoryTime_Call) RunAndReturn(run func(*tg.Channel, int, int, int) (tg.MessagesMessagesClass, error)) *ClientSource_MessagesGetHistoryTime_Call {
	_c.Call.Return(run)
	return _c
}

// MessagesGetHistoryTimeChannelMessage provides a mock function with given fields: channel, limit, time
func (_m *ClientSource) MessagesGetHistoryTimeChannelMessage(channel *tg.Channel, limit int, time int) (tg.MessagesMessagesClass, error) {
	ret := _m.Called(channel, limit, time)

	var r0 tg.MessagesMessagesClass
	var r1 error
	if rf, ok := ret.Get(0).(func(*tg.Channel, int, int) (tg.MessagesMessagesClass, error)); ok {
		return rf(channel, limit, time)
	}
	if rf, ok := ret.Get(0).(func(*tg.Channel, int, int) tg.MessagesMessagesClass); ok {
		r0 = rf(channel, limit, time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.MessagesMessagesClass)
		}
	}

	if rf, ok := ret.Get(1).(func(*tg.Channel, int, int) error); ok {
		r1 = rf(channel, limit, time)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSource_MessagesGetHistoryTimeChannelMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessagesGetHistoryTimeChannelMessage'
type ClientSource_MessagesGetHistoryTimeChannelMessage_Call struct {
	*mock.Call
}

// MessagesGetHistoryTimeChannelMessage is a helper method to define mock.On call
//   - channel *tg.Channel
//   - limit int
//   - time int
func (_e *ClientSource_Expecter) MessagesGetHistoryTimeChannelMessage(channel interface{}, limit interface{}, time interface{}) *ClientSource_MessagesGetHistoryTimeChannelMessage_Call {
	return &ClientSource_MessagesGetHistoryTimeChannelMessage_Call{Call: _e.mock.On("MessagesGetHistoryTimeChannelMessage", channel, limit, time)}
}

func (_c *ClientSource_MessagesGetHistoryTimeChannelMessage_Call) Run(run func(channel *tg.Channel, limit int, time int)) *ClientSource_MessagesGetHistoryTimeChannelMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tg.Channel), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *ClientSource_MessagesGetHistoryTimeChannelMessage_Call) Return(_a0 tg.MessagesMessagesClass, _a1 error) *ClientSource_MessagesGetHistoryTimeChannelMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSource_MessagesGetHistoryTimeChannelMessage_Call) RunAndReturn(run func(*tg.Channel, int, int) (tg.MessagesMessagesClass, error)) *ClientSource_MessagesGetHistoryTimeChannelMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientSource creates a new instance of ClientSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientSource {
	mock := &ClientSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
