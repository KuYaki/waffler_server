// Code generated by mockery v2.36.0. DO NOT EDIT.

package webhook

import (
	"github.com/KuYaki/waffler_server/internal/modules/bot_translator"
	mock "github.com/stretchr/testify/mock"
)

// SenderWebhooker is an autogenerated mock type for the SenderWebhooker type
type SenderWebhooker struct {
	mock.Mock
}

type SenderWebhooker_Expecter struct {
	mock *mock.Mock
}

func (_m *SenderWebhooker) EXPECT() *SenderWebhooker_Expecter {
	return &SenderWebhooker_Expecter{mock: &_m.Mock}
}

// SendUpdate provides a mock function with given fields: upd, host
func (_m *SenderWebhooker) SendUpdate(upd bot_translator.Update, host string) error {
	ret := _m.Called(upd, host)

	var r0 error
	if rf, ok := ret.Get(0).(func(bot_translator.Update, string) error); ok {
		r0 = rf(upd, host)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderWebhooker_SendUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUpdate'
type SenderWebhooker_SendUpdate_Call struct {
	*mock.Call
}

// SendUpdate is a helper method to define mock.On call
//   - upd bot_translator.Update
//   - host string
func (_e *SenderWebhooker_Expecter) SendUpdate(upd interface{}, host interface{}) *SenderWebhooker_SendUpdate_Call {
	return &SenderWebhooker_SendUpdate_Call{Call: _e.mock.On("SendUpdate", upd, host)}
}

func (_c *SenderWebhooker_SendUpdate_Call) Run(run func(upd bot_translator.Update, host string)) *SenderWebhooker_SendUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bot_translator.Update), args[1].(string))
	})
	return _c
}

func (_c *SenderWebhooker_SendUpdate_Call) Return(_a0 error) *SenderWebhooker_SendUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderWebhooker_SendUpdate_Call) RunAndReturn(run func(bot_translator.Update, string) error) *SenderWebhooker_SendUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewSenderWebhooker creates a new instance of SenderWebhooker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSenderWebhooker(t interface {
	mock.TestingT
	Cleanup(func())
}) *SenderWebhooker {
	mock := &SenderWebhooker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
